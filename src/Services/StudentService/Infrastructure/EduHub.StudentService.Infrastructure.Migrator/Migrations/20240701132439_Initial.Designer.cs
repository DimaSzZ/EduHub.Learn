// <auto-generated />
using System;
using EduHub.StudentService.Domain.Entities.Enums;
using EduHub.StudentService.Infrastructure.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduHub.StudentService.Infrastructure.Migrator.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240701132439_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "default", "man", "woman" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EducatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("educator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Educator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DateEmployment")
                        .HasColumnType("date")
                        .HasColumnName("date_employment");

                    b.Property<Gender>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("gender")
                        .HasDefaultValue(Gender.Default)
                        .HasColumnName("gender");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_experience");

                    b.HasKey("Id");

                    b.ToTable("Educators");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateOnly>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<Gender>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("gender")
                        .HasDefaultValue(Gender.Default)
                        .HasColumnName("gender");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Course", b =>
                {
                    b.HasOne("EduHub.StudentService.Domain.Entities.Educator", null)
                        .WithMany("Courses")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Educator", b =>
                {
                    b.OwnsOne("EduHub.StudentService.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("EducatorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("first_name");

                            b1.Property<string>("Patronymic")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("patronymic");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("surname");

                            b1.HasKey("EducatorId");

                            b1.ToTable("Educators");

                            b1.WithOwner()
                                .HasForeignKey("EducatorId");
                        });

                    b.OwnsOne("EduHub.StudentService.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("EducatorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("phone");

                            b1.HasKey("EducatorId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Unique_Educator_Phone");

                            b1.ToTable("Educators");

                            b1.WithOwner()
                                .HasForeignKey("EducatorId");
                        });

                    b.Navigation("FullName");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("EduHub.StudentService.Domain.Entities.Course", null)
                        .WithOne()
                        .HasForeignKey("EduHub.StudentService.Domain.Entities.Enrollment", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduHub.StudentService.Domain.Entities.Student", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Student", b =>
                {
                    b.OwnsOne("EduHub.StudentService.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("first_name");

                            b1.Property<string>("Patronymic")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("patronymic");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("surname");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("EduHub.StudentService.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("phone");

                            b1.HasKey("StudentId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Unique_Student_Phone");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("EduHub.StudentService.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<int>("NumberHouse")
                                .HasColumnType("integer")
                                .HasColumnName("number_house");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("EduHub.StudentService.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("email");

                            b1.HasKey("StudentId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Unique_Email");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("FullName");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Educator", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EduHub.StudentService.Domain.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
